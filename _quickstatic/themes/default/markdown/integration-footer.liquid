{.hidden #express_btn_content}
:::::
### Express js

Quickly integrate APIToolkit into your express js application

#### Installation 

``` bash
npm install apitoolkit-express
```

#### Integrate

``` js

import express from 'express';
import { APIToolkit } from 'apitoolkit-express';
const app = express();
const apitoolkitClient = APIToolkit.NewClient({ apiKey: '<API-KEY>' });
  
app.use(apitoolkitClient.expressMiddleware)
// All controllers should live here
app.get("/", (req, res) => {
});
// ...
// The error handler must be before any other error middleware
// and after all controllers
app.use(apitoolkitClient.errorHandler)

```

:::::

{.hidden #phoenix_btn_content}
:::::

### Elixir Phoenix

Quickly integrate APIToolkit into your elixir application

#### Installation (add to deps)

``` bash
{:apitoolkit_phoenix, "~> 0.1.1"}
```

#### Integrate

``` js
// route.ex file                   
defmodule HelloWeb.Router do
  import ApitoolkitPhoenix

  pipeline :api do
    plug ApitoolkitPhoenix,
    config: %{
      api_key: "<YOUR_API_KEY>",
    }
  end

  // Automatic error handling
  @impl Plug.ErrorHandler
  def handle_errors(conn, err) do
    conn = report_error(conn, err)
    json(conn, %{message: "Something went wrong"})
  end
end 
```

:::::


{.hidden #laravel_btn_content}
:::::

### Laravel PHP 

Quickly integrate APIToolkit into your laravel application

#### Installation (add to deps)

``` bash
composer require apitoolkit/apitoolkit-laravel
```

#### Set the APITOOLKIT_KEY environment variable to your API key in your .env file.

```bash
APITOOLKIT_KEY=xxxxxx-xxxxx-xxxxxx-xxxxxx-xxxxxx
```

#### Integrate

``` php
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
  protected $middlewareGroups = [
    'api' => [
    \APIToolkit\Http\Middleware\APIToolkit::class,
    ],
  ];
}
```
:::::

{.hidden #net_btn_content}
:::::
### .NET 

Quickly integrate APIToolkit into your .NET application

#### Installation 

``` bash
dotnet add package ApiToolkit.Net
```

#### Integrate

``` .NET 
var config = new Config
{
    Debug = true, # Set debug flags to false in production
    ApiKey = "{Your_APIKey}"
};
var client = await APIToolkit.NewClientAsync(config);
# Register the middleware to use the initialized client
app.Use(async (context, next) =>
{
    var apiToolkit = new APIToolkit(next, client);
    await apiToolkit.InvokeAsync(context);
});
```
:::::

{.hidden #django_btn_content}
:::::
### Django 

Quickly integrate APIToolkit into your Django application

#### Installation 

``` bash
pip install apitoolkit-django
```

#### Add APIKey to settings.py

```bash
APITOOLKIT_KEY = "< YOUR_API_KEY >"
```

#### Integrate

``` .NET 
MIDDLEWARE = [
    ...,
    'apitoolkit_django.APIToolkit',
    ...,
]
var config = new Config
{
    Debug = true, # Set debug flags to false in production
    ApiKey = "{Your_APIKey}"
};
```
:::::

{.hidden #fast_btn_content}
:::::
### FastAPI 

Quickly integrate APIToolkit into your fastapi application

#### Installation 

``` bash
pip install apitoolkit-fastapi
```

#### Integrate

```py 
from fastapi import FastAPI
from apitoolkit_fastapi import APIToolkit

app = FastAPI()

apitoolkit = APIToolkit(api_key='')

app.middleware('http')(apitoolkit.middleware)
```
:::::

{.hidden #flask_btn_content}
:::::
### Flask 

Quickly integrate APIToolkit into your flask application

#### Installation 

``` bash
pip install apitoolkit-flask
```

#### Integrate

``` py
from flask import Flask
from apitoolkit_flask import APIToolkit

app = Flask(**name**)

apitoolkit = APIToolkit(api_key="<API_KEY>", debug=True)

@app.before_request
def before_request():
  apitoolkit.beforeRequest()

@app.after_request
def after_request(response):
  apitoolkit.afterRequest(response)
  return response
```
:::::

{.hidden #gin_btn_content}
:::::
### Golang Gin 

Quickly integrate APIToolkit into your gin application

#### Installation 

``` bash
go get github.com/apitoolkit/apitoolkit-go
```

#### Integrate

``` go
package main

import (
"context"
apitoolkit "github.com/apitoolkit/apitoolkit-go"
"github.com/gin-gonic/gin"
)

func main() {

    // Initialize the client using your apitoolkit.io generated apikey
    apitoolkitClient, err := apitoolkit.NewClient(context.Background(), apitoolkit.Config{APIKey: "YOUR GENERATED API KEY"})
    if err != nil {
    	panic(err)
    }

    router := gin.New()

    // Register with the corresponding middleware of your choice. For Gin router, we use the GinMiddleware method.
    router.Use(apitoolkitClient.GinMiddleware)

}
```
:::::

{.hidden #adonis_btn_content}
:::::
### Adonis JS 

Quickly integrate APIToolkit into your adonis js application

#### Installation 

``` bash
npm install apitoolkit-adonis
```

#### Configure the package

``` bash
node ace configure apitoolkit-adonis
```

#### Set APIKEY in `/conf/apitoolkit`

``` js
export const apitoolkitConfig = {
  apiKey: "",
};
```

#### Integrate

``` js
Server.middleware.register([
  () => import("@ioc:Adonis/Core/BodyParser"),
  () => import("@ioc:APIToolkit"),
]);
```
:::::

{.hidden #fastify_btn_content}
:::::
###  Fastify JS 

Quickly integrate APIToolkit into your Fastify js application

#### Installation 

``` bash
npm install apitoolkit-fastify
```

#### Integrate

``` js
import APIToolkit from 'apitoolkit-fastify';
import Fastify from 'fastify';

const fastify = Fastify();

// Create and initialize an instance of the APIToolkit
const apittoolkitClient = APIToolkit.NewClient({
  apiKey: 'YOUR_API_KEY',
  fastify,
});
apitoolkitClient.init();
```
:::::

{.hidden #nestjs_btn_content}
:::::
###  Nest JS 

Quickly integrate APIToolkit into your nest js application

#### Installation 

``` bash
npm install apitoolkit-express
```

#### Integrate

``` js
import { NestFactory } from '@nestjs/core';
import { APIToolkit } from 'apitoolkit-express';
import { AppModule } from './app.module';
//
async function bootstrap() {
  const apiToolkitClient = APIToolkit.NewClient({
    apikey: '',
  });
  const app = await NestFactory.create(AppModule);
  app.use(apiToolkitClient.expressMiddleware);
  await app.listen(3000);
}
//
bootstrap();
```
:::::

{.hidden #mux_btn_content}
:::::
###  Golang Gorilla Mux

Quickly integrate APIToolkit into your Golang Gorilla Mux application

#### Installation 

``` bash
go get -u github.com/gorilla/mux
```

#### Integrate

``` go
package main

import (
  "context"
  "net/http"
  "github.com/gorilla/mux"
  apitoolkit "github.com/apitoolkit/apitoolkit-go"
)

func main() {
  ctx := context.Background()
  // Initialize the client using your generated apikey
  apitoolkitClient, err := apitoolkit.NewClient(ctx, apitoolkit.Config{APIKey: ""})
  if err != nil {
    panic(err)
  }

  r := mux.NewRouter()
  // Register middleware
  r.Use(apitoolkitClient.GorillaMuxMiddleware)
}
```

:::::


{.hidden #symfony_btn_content}
:::::
### Symfony PHP

Quickly integrate APIToolkit into your Symfony PHP application

#### Installation 

``` bash
composer require apitoolkit/apitoolkit-symfony
```

##### Set the APITOOLKIT_KEY environment variable to your API key in your .env file.

``` bash
APITOOLKIT_KEY=xxxxxx-xxxxx-xxxxxx-xxxxxx-xxxxxx
```

#### Integrate (services.yaml)

```yaml 
services:
  APIToolkit\EventSubscriber\APIToolkitService:
    arguments:
      $apiKey: '%env(APITOOLKIT_KEY)%'
    # Optional:  if you want to cache login result add this cache poll instance via setter injection
    calls:
      - setCachePool: ['@PutYourCachePoolServiceHere']
    tags:
      - { name: 'kernel.event_subscriber' }
      
```

:::::

{.hidden #go_btn_content}
:::::
### Golang Native 

Quickly integrate APIToolkit into your native Golang application

#### Installation 

``` bash
go get -u github.com/apitoolkit/apitoolkit-go
```

#### Integrate 

```go
package main

import (
  "net/http"
  "context"
  apitoolkit "github.com/apitoolkit/apitoolkit-go"
)

func main() {
  // Initialize APIToolkit client with your generated API key
  ctx := context.Background()
  apitoolkitClient, err := apitoolkit.NewClient(ctx, apitoolkit.Config{APIKey: "YOUR_GENERATED_API_KEY"})
  if err != nil {
    panic(err)
  }

  http.Handle("/", apitoolkitClient.Middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
    w.Write([]byte("Hello, World!"))
  })))
  http.ListenAndServe(":8080", nil)
}
```

:::::


{.text-center}
## Integrate APIToolkit

{.max-w-4xl .mx-auto .text-center .text-lg .inline-block}
We support 14+ web frameworks (if we don't support your framework, email hello@apitoolkit.io and we'll create an SDK for you ASAP)

``` =html
<div class="flex flex-col sm:flex-row sm:space-x-8 mt-8 width-control">
  <div class="mt-4 sm:w-1/2">
    <div class="overflow-x-auto p-1 [&>*]:shrink-0 grid grid-cols-5 sm:grid-cols-4 gap-2 ">
      {% for framework in config.raw.apitoolkit_supported_frameworks %}
        {% if framework.href %}
          <a href="{{ framework.href }}" class="h-full border text-center shadow text-base font-normal rounded-lg p-2 flex just-center items-center integrate-btns">
            <span>{{ framework.title }}</span>
          </a>
        {% else %}
          <button class="integrate-btns border shadow rounded-lg p-2 h-full flex items-center justify-center {% if forloop.first %}ring{% endif %}" 
                  id="{{ framework.id }}" title="{{ framework.title }}" xonclick="integrationTabs(event)"
                  _="on click remove .ring from .integrate-btns then add .ring to me then put #{{framework.id}}_content.innerHTML into #integration_details_parent.innerHTML "
          >
            <img src="{{ framework.img_src }}" alt="{{ framework.alt }}" class="w-full" />
          </button>
        {% endif %}
      {% endfor %}
    </div>
  </div>
  <div class="grow flex flex-col w-full m-0 py-0 text-left" id="integration_details_parent" _="init put #express_btn_content.innerHTML into me.innerHTML" ></div>
</div>
```
